c
fetch_from_cache(key, options: { raw: true }).to_i
fetch_from_cache(key, options: { raw: true })
key_exists_in_cache?(key)
c
key_exists_in_cache?(key)
c
key_exists_in_cache?(key)
c
key_exists_in_cache?(key)
c
key
key_exists_in_cache?(key)
c
fetch_from_cache(key, options: { raw: true })
c
fetch_from_cache(key, options: { raw: true }).to_i
fetch_from_cache(key, options: { raw: true })
key_exists_in_cache?(key)
key
c
cache.fetch(cache_key, options: { raw: true })
c
@actual_error
n
c
n
c
response
n
open?
n
c
run_circuit.call
c
cache.fetch(cache_key, options: { raw: true })
run_circuit.call
cache.fetch(cache_key, options: { raw: true })
final_value
initial_value
c
final_value
c
final_value
cache.fetch(cache_key, options: { raw: true })
cache
run_circuit.call
cache
run_circuit.call
cache
c
@actual_error
n
up
n
CircuitBreaker.configuration
s
event_notifier
exit
CircuitBreaker.configuration
s
c
event_notifier
c
run_circuit.call
c
Rails.cache
run_circuit.call
Rails.cache
run_circuit.call
Rails.cache
c
Rails.cache
run_circuit.call
run_circuit
Rails.cache
c
cache_storage
cache_store
cache
c
cache
run_circuit.call
cache
up
s
c
Rails.cache.fetch("circuits:http://jacobson.io/terrance_kris:stats:1702397000:success", options: 1)
Rails.cache.fetch("circuits:http://jacobson.io/terrance_kris:stats:1702397000:success", options: 10)
Rails.cache.fetch("circuits:http://jacobson.io/terrance_kris:stats:1702397000:success", options: 1)
Rails.cache.fetch("circuits:http://jacobson.io/terrance_kris:stats:1702397000:success")
n
up
stat_storage_key(event)
s
n
c
s
up
s
Rails.cache.fetch("circuits:http://stracke-)
Rails.Cache.fetch("circuits:http://stracke-stoltenberg.net/juanita:stats:1702396900:success")
Cache.fetch("circuits:http://stracke-stoltenberg.net/juanita:stats:1702396900:success")
run_circuit.call
c
Cache.fetch("circuits:http://stracke-stoltenberg.net/juanita:stats:1702396900:success")
n
half_open?
n
up
stat_storage_key(event)
s
n
open?
n
c
